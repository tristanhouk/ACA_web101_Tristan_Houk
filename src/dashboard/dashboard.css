@import url('https://fonts.googleapis.com/css?family=Open+Sans:300,300i,400,400i,600,600i,700,700i,800,800i');
*{
  box-sizing: border-box;
}
body {
  /* background: red; */
  height: 100%;
  margin: 0;
  padding: 0;
  font-family: 'Open Sans', sans-serif;
}
/* teach first, remove -1 */
.grid-container {
  border: 3px solid black;
  height: 100%;
  grid-template-rows: 80px 200px 200px;
  /* Grid items are placed in rows by default and
  span the full width of the grid container. */
  
  display: grid;

   /* Explicit Grid */
   /* Explicitly set a grid by creating columns and rows with 
   the grid-template-columns and grid-template-rows properties. */
grid-template-columns: 90px 50px 120px;
 
  /**** replace me with code ****/
  grid-template-rows: 50px 100px;
  /* A row track is created for each value specified for grid-template-rows. 
  Track size values can be any non-negative, length value (px, %, em, etc.)
  Items 1 and 2 have fixed heights of 50px and 100px.
  Because only 2 row tracks were defined, heights of items 3 and 4 are defined by the contents of each. */

  /**** replace me with code ****/

  /* Items 4, 5 and 6 were placed on a new row track because only 
  3 column track sizes were defined; and because they were placed in column 
  tracks 1, 2 and 3, their column sizes are equal to items 1, 2 and 3. */

  /**** replace me with code ****/
grid-template-columns: 1fr 1fr 2fr;
  /* The fr unit helps create flexible grid tracks. It represents a fraction of the available 
  space in the grid container (works like Flexboxâ€™s unitless values).
  In this example, items 1 and 2 take up the first two (of four) 
  sections while item 3 takes up the last two. */

  /**** replace me with code ****/

  /* fr is calculated based on the remaining space when combined with other length values. */
  /* In this example, 3rem and 25% would be subtracted from the 
  available space before the size of fr is calculated: */

  /**** replace me with code ****/
  /**** replace me with code ****/
grid-template-rows: minmax(100px, auto);
  /* The minmax() function accepts 2 arguments: the first is the minimum size of the track 
  and the second the maximum size. Alongside length values, the values can also be auto, 
  which allows the track to grow/stretch based on the size of the content.
  In this example, the first row track is set to have a minimum height of 100px, 
  but its maximum size of auto will allow the row track to grow it the content is taller than 100px.
  The first column track has a minimum size of auto, but its maximum size of 50% will prevent 
  it from getting no wider than 50% of the grid container width. */

 /**** replace me with code ****/
  /**** replace me with code ****/

  /* The repeat() notation accepts 2 arguments: 
  the first represents the number of times the defined tracks should repeat, 
  and the second is the track definition. */

  /**** replace me with code ****/

  /* repeat() can also be used within track listings.
  In this example, the first and last column tracks have widths of 30px, 
  and the 3 column tracks in between, created by repeat(), have widths of 1fr each. */

  /**** replace me with code ****/
  /**** replace me with code ****/

  /* Gap size values can be any non-negative, length value (px, %, em, etc.) */

  /**** replace me with code ****/

  /* grid-gap is shorthand for grid-row-gap and grid-column-gap.
  If two values are specified, the first represents grid-row-gap and the second grid-column-gap. */
}
.grid-item {
  /* border: 1px dotted #eee; */
  background-color: crimson;
  border-radius: 6px;
  color: #fff;
  font-size: 26px;
  display: flex;
  justify-content: center;
  align-items: center;  
}
/* teach first, change -10 to 1 */
.grid-item-0 {
    
  
 
}

/* teach when you get to grid areas */
.grid-container {
  border: 3px solid black;
  height: 100%;
  display: grid;
  
  grid-row-gap: 10px;
  grid-template-columns: auto auto auto;
 /**** replace me with code ****/


/* Sets of names should be surrounded in 
single or double quotes, and each name separated by a whitespace.
Each set of names defines a row, and each name defines a column. */
}
.grid-item-1 {
    grid-column-start: 1;
    grid-column-end: 3;
    font-size: 34px;
    font-family: fantasy;

  }

.grid-item-2 {
    align-items: top;
 /**** replace me with code ****/
}
.grid-item-3 {
  
}
.grid-item-4 {
  /**** replace me with code ****/
}